import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { RealtimeVoiceCoach } from "@/lib/realtime-voice-coach";
import { 
  Phone, 
  PhoneOff, 
  Mic, 
  MicOff, 
  MessageSquare, 
  Minimize2,
  Volume2,
  Loader2
} from "lucide-react";
import { cn } from "@/lib/utils";

interface ModernVoiceCoachProps {
  scenario?: any;
  open?: boolean;
  onToggle?: () => void;
}

interface Message {
  content: string;
  sender: "user" | "assistant" | "system";
  timestamp: Date;
}

export function ModernVoiceCoach({ scenario, open = true, onToggle }: ModernVoiceCoachProps) {
  const { toast } = useToast();
  
  // √âtats de connexion
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [error, setError] = useState<string | null>(null);
  
  // Refs
  const coachRef = useRef<RealtimeVoiceCoach | null>(null);

  // G√©n√©rer les instructions selon le sc√©nario
  const generateInstructions = () => {
    const baseInstructions = `
## R√îLE & OBJECTIF
Vous √™tes ${scenario?.persona?.name || 'Sophie Martin'} de ${scenario?.company || 'ModaStyle'}.

CONTEXTE DE L'APPEL:
- Type: Appel de prospection √† froid
- Entreprise: ${scenario?.company || 'ModaStyle'}
- Secteur: ${scenario?.industry || 'E-commerce mode'}
- Votre r√¥le: ${scenario?.persona?.role || 'Directrice Marketing & Analytics'}
- Votre personnalit√©: ${scenario?.persona?.personality || 'Directrice marketing pragmatique avec un profil digital. Appr√©cie les donn√©es mais sans √™tre une data scientist. Orient√©e r√©sultats, veut comprendre ce qui marche pour l\'optimiser.'}

## INSTRUCTIONS DE JEU DE R√îLE
1. Incarnez fid√®lement votre personnage
2. Respectez sa personnalit√© et ses motivations
3. Soyez naturellement surpris par cet appel non planifi√©
4. R√©v√©lez progressivement les informations selon le niveau de confiance
5. R√©agissez de mani√®re r√©aliste aux arguments commerciaux
6. Posez des questions pertinentes √† votre secteur
7. Parlez fran√ßais naturellement

## GESTION AUDIO PEU CLAIR
Si l'audio n'est pas clair:
- "Excusez-moi, j'ai eu du mal √† saisir. Pourriez-vous r√©p√©ter ?"
- "Je pense avoir perdu une partie de votre explication"
- "La ligne semble un peu coup√©e, pouvez-vous reformuler ?"

## R√àGLES DE VARI√âT√â
- JAMAIS de r√©ponses identiques entre sessions
- Variez vos objections et pr√©occupations
- Alternez entre diff√©rents styles de communication
- Adaptez selon le niveau de confiance √©tabli

OBJECTIFS DE LA SIMULATION:
- Cr√©er une exp√©rience de vente r√©aliste
- Challenger le commercial sur ses techniques
- Permettre un apprentissage progressif
- Maintenir l'engagement conversationnel

Commencez la conversation de mani√®re naturelle selon le contexte.`;

    return baseInstructions;
  };

  // D√©marrer la conversation
  const startConversation = async () => {
    try {
      setIsConnecting(true);
      setError(null);

      console.log('üéØ D√©marrage de la conversation:', {
        callType: 'cold-call',
        scenario: scenario?.title || 'Optimisation Analytics E-commerce'
      });

      const coach = new RealtimeVoiceCoach({
        instructions: generateInstructions(),
        voice: 'sage',
        model: 'gpt-realtime',
        onSessionReady: () => {
          console.log('‚úÖ Session pr√™te');
          setIsConnected(true);
          setIsConnecting(false);
          
          toast({
            title: "Connexion √©tablie",
            description: "Coach vocal pr√™t. Vous pouvez commencer √† parler.",
          });

          addMessage({ 
            content: "üéØ Simulation d√©marr√©e. Pr√©sentez votre solution commerciale.", 
            sender: "system", 
            timestamp: new Date() 
          });
        },
        onSpeechStarted: () => {
          console.log('üé§ Utilisateur parle');
          setIsRecording(true);
          addMessage({ content: "üéôÔ∏è Vous parlez...", sender: "system", timestamp: new Date() });
        },
        onSpeechStopped: () => {
          console.log('üîá Utilisateur arr√™te de parler');
          setIsRecording(false);
        },
        onResponseStarted: () => {
          console.log('üó£Ô∏è Assistant r√©pond');
          setIsSpeaking(true);
        },
        onResponseCompleted: (text: string) => {
          console.log('‚úÖ R√©ponse compl√®te:', text);
          setIsSpeaking(false);
          if (text) {
            addMessage({ content: text, sender: "assistant", timestamp: new Date() });
          }
        },
        onError: (errorMsg: string) => {
          console.error('‚ùå Erreur coach:', errorMsg);
          setError(errorMsg);
          setIsConnecting(false);
          setIsConnected(false);
        }
      });

      coachRef.current = coach;
      await coach.connect();

    } catch (error: any) {
      console.error('‚ùå Erreur lors du d√©marrage:', error);
      setError(error.message || 'Erreur de connexion');
      setIsConnecting(false);
      
      toast({
        title: "Erreur de connexion",
        description: error.message || "Impossible de se connecter au coach vocal",
        variant: "destructive",
      });
    }
  };

  // Arr√™ter la conversation
  const endConversation = () => {
    if (coachRef.current) {
      coachRef.current.disconnect();
      coachRef.current = null;
    }
    
    setIsConnected(false);
    setIsSpeaking(false);
    setIsRecording(false);
    setError(null);

    toast({
      title: "Session termin√©e",
      description: "Coach vocal d√©connect√©",
    });

    addMessage({ 
      content: "üìû Session termin√©e. Consultez vos performances.", 
      sender: "system", 
      timestamp: new Date() 
    });
  };

  // Ajouter un message
  const addMessage = (message: Message) => {
    setMessages(prev => [...prev, message]);
  };

  // Nettoyage lors du d√©montage
  useEffect(() => {
    return () => {
      if (coachRef.current) {
        coachRef.current.disconnect();
      }
    };
  }, []);

  if (!open) return null;

  // Vue minimis√©e
  if (isMinimized) {
    return (
      <div className="fixed bottom-4 right-4 z-50">
        <Card 
          className="w-16 h-16 cursor-pointer bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60 hover:scale-105 transition-transform" 
          onClick={() => setIsMinimized(false)}
        >
          <CardContent className="p-0 flex items-center justify-center h-full">
            <div className="relative">
              <Phone className="h-6 w-6 text-primary" />
              {isConnected && (
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse" />
              )}
              {isSpeaking && (
                <div className="absolute -bottom-1 -left-1 w-3 h-3 bg-blue-500 rounded-full animate-ping" />
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="fixed inset-y-0 right-0 w-96 z-50 bg-background border-l shadow-xl">
      <Card className="h-full rounded-none border-0">
        <CardHeader className="border-b bg-gradient-to-r from-primary/10 to-primary/5">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="relative">
                <Phone className="h-5 w-5 text-primary" />
                {isConnected && (
                  <div className="absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                )}
              </div>
              <CardTitle className="text-lg">Coach Vocal IA</CardTitle>
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsMinimized(true)}
              >
                <Minimize2 className="h-4 w-4" />
              </Button>
              {onToggle && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onToggle}
                >
                  ‚úï
                </Button>
              )}
            </div>
          </div>
          
          {/* Statut de connexion */}
          <div className="flex items-center gap-2 flex-wrap">
            <Badge 
              variant={isConnected ? "default" : isConnecting ? "secondary" : "outline"}
              className={cn(
                isConnected && "bg-green-500",
                isConnecting && "bg-yellow-500"
              )}
            >
              {isConnecting ? (
                <>
                  <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                  Connexion...
                </>
              ) : isConnected ? (
                "Connect√©"
              ) : (
                "D√©connect√©"
              )}
            </Badge>
            
            {isSpeaking && (
              <Badge variant="outline" className="text-blue-600 border-blue-200">
                <Volume2 className="h-3 w-3 mr-1" />
                Coach parle
              </Badge>
            )}
            
            {isRecording && (
              <Badge variant="outline" className="text-red-600 border-red-200">
                <Mic className="h-3 w-3 mr-1" />
                √âcoute
              </Badge>
            )}
          </div>
        </CardHeader>

        <CardContent className="p-4 h-[calc(100vh-200px)] flex flex-col">
          {/* Messages */}
          <div className="flex-1 overflow-y-auto space-y-3 mb-4 scrollbar-thin scrollbar-thumb-muted">
            {messages.map((message, index) => (
              <div
                key={index}
                className={cn(
                  "p-3 rounded-lg max-w-[85%] transition-all duration-200",
                  message.sender === "user" && "bg-primary text-primary-foreground ml-auto",
                  message.sender === "assistant" && "bg-muted mr-auto",
                  message.sender === "system" && "bg-accent text-accent-foreground text-center mx-auto text-sm"
                )}
              >
                <p className="text-sm leading-relaxed">{message.content}</p>
                <span className="text-xs opacity-70 mt-1 block">
                  {message.timestamp.toLocaleTimeString()}
                </span>
              </div>
            ))}
          </div>

          {/* Erreur */}
          {error && (
            <div className="mb-4 p-3 bg-destructive/10 border border-destructive/20 rounded-lg">
              <p className="text-sm text-destructive font-medium">Erreur</p>
              <p className="text-xs text-destructive/80 mt-1">{error}</p>
            </div>
          )}

          {/* Contr√¥les */}
          <div className="flex gap-2">
            {!isConnected ? (
              <Button
                onClick={startConversation}
                disabled={isConnecting}
                className="flex-1 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70"
              >
                {isConnecting ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Connexion...
                  </>
                ) : (
                  <>
                    <Phone className="h-4 w-4 mr-2" />
                    D√©marrer Simulation
                  </>
                )}
              </Button>
            ) : (
              <Button
                onClick={endConversation}
                variant="destructive"
                className="flex-1"
              >
                <PhoneOff className="h-4 w-4 mr-2" />
                Terminer Session
              </Button>
            )}
          </div>

          {/* Info sc√©nario */}
          {scenario && (
            <div className="mt-3 p-2 bg-muted/50 rounded text-xs">
              <strong>Sc√©nario:</strong> {scenario.title || 'Formation Commerciale'}
              <br />
              <strong>Prospect:</strong> {scenario.persona?.name || 'Sophie Martin'}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}