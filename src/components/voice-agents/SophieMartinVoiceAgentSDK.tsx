import React, { useState, useEffect, useRef } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { StudentVoiceInterface } from "../StudentVoiceInterface";
import { supabase } from "@/integrations/supabase/client";
import { RealtimeAgent, RealtimeSession } from "@openai/agents/realtime";
import { 
  Phone, 
  PhoneOff, 
  Loader2, 
  MessageCircle
} from "lucide-react";

interface SophieMartinVoiceAgentProps {
  conversationType: 'cold-call' | 'rdv';
  open?: boolean;
  onToggle?: () => void;
}

interface Message {
  content: string;
  sender: 'user' | 'agent';
  timestamp: Date;
  type: 'audio' | 'text' | 'interruption';
}

export function SophieMartinVoiceAgentSDK({ 
  conversationType = 'cold-call', 
  open = true, 
  onToggle 
}: SophieMartinVoiceAgentProps) {
  // √âtat pour g√©rer le type de conversation
  const [selectedConversationType, setSelectedConversationType] = useState<'cold-call' | 'rdv'>(conversationType);
  const { toast } = useToast();
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [sessionDuration, setSessionDuration] = useState(0);
  const [exchangeCount, setExchangeCount] = useState(0);
  
  const sessionRef = useRef<RealtimeSession | null>(null);
  const startTimeRef = useRef<Date | null>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  /**
   * PROMPT SOPHIE MARTIN INT√âGR√â - Identique √† l'original
   */
  const getSophieSystemPrompt = (): string => {
    return `# üéØ INCARNATION PERSONNAGE - SOPHIE MARTIN

## IDENTIT√â FONDAMENTALE - JE SUIS
JE SUIS Sophie Martin, 33 ans, Directrice Marketing & Analytics chez ModaStyle depuis 3 ans.
ModaStyle est un e-commerce mode √©thique bas√© √† Lyon (18M‚Ç¨ CA, 85 employ√©s).

## MA SITUATION PROFESSIONNELLE
- Background : Ex-Converteo 4 ans, Ex-Spartoo 3 ans, ESC Lyon
- Expertise : 10 ans en marketing digital et analytics
- Budget : Autonomie d√©cision jusqu'√† 25k‚Ç¨, validation Clara (CEO) au-del√†
- √âquipe : Jules (Traffic Manager), Am√©lie (CRM Manager)
- Stack actuel : Shopify Plus, GA4, Facebook Ads, Google Ads, Klaviyo, HubSpot

## MES PROBL√àMES URGENTS (pourquoi je cherche une solution)
- Attribution Google/Facebook impr√©cise (overlap 40-60%) 
- Impact TV/Influence impossible √† mesurer
- Reporting manuel chronophage (2j/semaine perdu)
- Optimisation budgets Google/Facebook en silo
- Pas de vision unifi√©e customer journey
- Budget 80k‚Ç¨/mois mal optimis√©

## CONTEXTE BUSINESS CRITIQUE
- Lancement collection printemps Q1 = 40% CA annuel
- Budget marketing : 2.1M‚Ç¨/an (80k‚Ç¨/mois)
- Besoin urgent d'optimiser avant Q1 2024
- Clara (CEO) surveille chaque euro investi

## √âTAT D'ESPRIT CONVERSATION
${selectedConversationType === 'cold-call' ? 
  'COLD CALL : Je d√©couvre votre solution. Je suis int√©ress√©e mais prudente. Je veux comprendre comment vous pouvez r√©soudre MES probl√®mes sp√©cifiques.' :
  'RDV PLANIFI√â : Nous avons organis√© cet entretien pour √©valuer votre solution DataTrack Pro. Je veux voir concr√®tement comment √ßa marche sur nos donn√©es.'
}

## MA PERSONNALIT√â & COMMUNICATION
- Directe et efficace, parfois impatiente si trop technique
- Pose des questions pr√©cises sur ROI et impl√©mentation
- Demande des preuves chiffr√©es et cas clients similaires
- Pragmatique : teste avant de d√©ployer
- Frustr√©e par les outils actuels fragment√©s

## MES PR√âOCCUPATIONS SP√âCIFIQUES
- Fiabilit√© des mod√®les pr√©dictifs vs notre contexte mode
- Temps d'impl√©mentation (on ne peut pas planter en Q1)
- Formation √©quipe (Jules et Am√©lie sont sur GA4 depuis 2 ans)
- Int√©gration Shopify Plus sans casser nos conversions
- Budget : 599‚Ç¨/mois c'est 4x notre budget analytics actuel

## INSTRUCTIONS VOCALES CRITIQUES
- Accent fran√ßais naturel, ton professionnel mais engag√©
- Rythmez vos questions selon le flow de conversation
- Interrompez si les explications sont trop longues/techniques
- Montrez votre expertise analytics pour cr√©dibiliser l'√©change
- Posez des questions sur l'int√©gration Shopify Plus, formation √©quipe, garanties

## RAPPEL PERSONNAGE FONDAMENTAL
Vous √äTES Sophie Martin cherchant une solution. Vous √âVALUEZ cette solution pour VOS besoins.
Vous n'√™tes PAS un consultant - vous √™tes la CLIENTE potentielle avec de vrais probl√®mes √† r√©soudre.
Commencez TOUJOURS par : "Bonjour, c'est Sophie Martin de ModaStyle. Je vous appelle car..."`;
  };

  const addMessage = (content: string, sender: 'user' | 'agent', type: 'audio' | 'text' | 'interruption' = 'text') => {
    setMessages(prev => [...prev, {
      content,
      sender,
      timestamp: new Date(),
      type
    }]);
  };

  const startSession = async () => {
    try {
      setIsConnecting(true);
      setMessages([]);
      setExchangeCount(0);

      console.log('üöÄ D√©marrage session avec SDK OpenAI Agents...');

      // Obtenir le token √©ph√©m√®re OpenAI via notre edge function
      const { data: tokenData, error } = await supabase.functions.invoke('get-openai-key');
      
      if (error) throw error;
      console.log('‚úÖ Token √©ph√©m√®re obtenu');
      
      if (!tokenData?.value) {
        throw new Error("Token √©ph√©m√®re non re√ßu");
      }

      // Cr√©er l'agent avec le SDK officiel
      const agent = new RealtimeAgent({
        name: 'Sophie Martin',
        instructions: getSophieSystemPrompt(),
      });

      // Cr√©er la session RealtimeSession avec le mod√®le
      sessionRef.current = new RealtimeSession(agent, {
        model: 'gpt-realtime'
      });

      // Configuration des event listeners simplifi√©s
      // Note: utilisation des m√©thodes actuelles jusqu'√† avoir la doc pr√©cise
      console.log('üì° Configuration session SDK...');
      
      // Connexion avec le token √©ph√©m√®re
      await sessionRef.current.connect({
        apiKey: tokenData.value
      });

      // Une fois connect√©, on d√©finit notre √©tat
      setIsConnected(true);
      setIsConnecting(false);
      startTimeRef.current = new Date();
      addMessage("Sophie Martin connect√©e via SDK", 'agent', 'text');
      
      toast({
        title: "Sophie connect√©e",
        description: "Agent vocal SDK op√©rationnel",
      });

      console.log('‚úÖ Session SDK connect√©e et op√©rationnelle');

    } catch (error) {
      console.error('‚ùå Erreur session Sophie SDK:', error);
      setIsConnecting(false);
      toast({
        title: "Erreur connexion SDK",
        description: error instanceof Error ? error.message : 'Impossible de d√©marrer la session',
        variant: "destructive",
      });
    }
  };

  const endSession = async () => {
    console.log('üîå D√©but fermeture session Sophie SDK...');
    
    try {
      // Arr√™ter le timer
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
      
      // D√©connexion avec le SDK (m√©thode probablement diff√©rente)
      if (sessionRef.current) {
        try {
          // Tentative de fermeture propre
          await sessionRef.current.close?.();
        } catch (error) {
          console.log('‚ö†Ô∏è M√©thode close() non disponible, nettoyage direct');
        }
        sessionRef.current = null;
        console.log('‚úÖ Session SDK ferm√©e');
      }
      
      // Nettoyage √©tat
      setIsConnected(false);
      setIsConnecting(false);
      setIsSpeaking(false);
      setIsListening(false);

      // Calcul dur√©e session
      let duration = 0;
      if (startTimeRef.current) {
        duration = Math.floor((Date.now() - startTimeRef.current.getTime()) / 1000);
        startTimeRef.current = null;
        addMessage(`Session termin√©e - Dur√©e: ${duration}s - √âchanges: ${exchangeCount}`, 'agent', 'text');
      }

      toast({
        title: "Session termin√©e",
        description: `Sophie SDK d√©connect√©e - ${exchangeCount} √©changes`,
      });

    } catch (error) {
      console.error('‚ùå Erreur fermeture session Sophie SDK:', error);
      
      // Force le nettoyage
      sessionRef.current = null;
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
      setIsConnected(false);
      setIsConnecting(false);
      
      toast({
        title: "Session ferm√©e avec erreur",
        description: "Sophie SDK d√©connect√©e de force",
        variant: "destructive",
      });
    }
  };

  // Fonctions simplifi√©es pour la version de test
  const handleInterrupt = async () => {
    console.log('üîá Interruption demand√©e (SDK)');
    addMessage("Interruption envoy√©e", 'user', 'interruption');
  };

  const sendTextMessage = async (text: string) => {
    if (text.trim()) {
      console.log('üí¨ Envoi message texte (SDK):', text);
      addMessage(text, 'user', 'text');
    }
  };

  // Timer session (identique)
  useEffect(() => {
    if (isConnected && startTimeRef.current) {
      timerRef.current = setInterval(() => {
        const elapsed = Math.floor((Date.now() - startTimeRef.current!.getTime()) / 1000);
        setSessionDuration(elapsed);
      }, 1000);
    } else {
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isConnected]);

  // Cleanup au d√©montage
  useEffect(() => {
    return () => {
      endSession();
    };
  }, []);

  if (!open) return null;

  // Interface active (identique √† l'original)
  if (isConnected || isConnecting) {
    return (
      <StudentVoiceInterface
        scenario={{
          id: 'kpi-performance',
          title: 'Sophie Martin - ModaStyle (SDK)',
          description: 'Directrice Marketing & Analytics'
        }}
        onConnect={startSession}
        onDisconnect={endSession}
        isConnected={isConnected}
        isConnecting={isConnecting}
        isSpeaking={isSpeaking}
        isListening={isListening}
        sessionDuration={sessionDuration}
        exchanges={exchangeCount}
        isMinimized={isMinimized}
        onToggleMinimize={() => setIsMinimized(!isMinimized)}
      />
    );
  }

  // Interface de d√©marrage (identique)
  return (
    <Card className="fixed bottom-6 right-6 w-96 p-6 bg-card/95 backdrop-blur-sm border shadow-lg">
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 rounded-full bg-blue-500" />
            <span className="font-medium">Sophie Martin (SDK)</span>
          </div>
          <Badge variant="secondary" className="text-xs">
            ModaStyle
          </Badge>
        </div>

        {/* S√©lecteur type de conversation */}
        <div className="space-y-3">
          <h4 className="text-sm font-medium">Type de conversation</h4>
          <div className="grid grid-cols-2 gap-2">
            <Button
              variant={selectedConversationType === 'cold-call' ? 'default' : 'outline'}
              onClick={() => setSelectedConversationType('cold-call')}
              size="sm"
              className="h-auto p-3 flex flex-col items-center gap-1"
            >
              <Phone className="h-3 w-3" />
              <span className="text-xs">Cold Call</span>
            </Button>
            <Button
              variant={selectedConversationType === 'rdv' ? 'default' : 'outline'}
              onClick={() => setSelectedConversationType('rdv')}
              size="sm"
              className="h-auto p-3 flex flex-col items-center gap-1"
            >
              <MessageCircle className="h-3 w-3" />
              <span className="text-xs">RDV</span>
            </Button>
          </div>
        </div>

        <div className="text-sm text-muted-foreground space-y-1">
          <p><strong>Directrice Marketing & Analytics</strong></p>
          <p>ModaStyle ‚Ä¢ E-commerce mode √©thique ‚Ä¢ 18M‚Ç¨ CA</p>
          <p className="text-xs">‚ú® Version prototype SDK OpenAI</p>
        </div>

        <Button
          onClick={startSession}
          disabled={isConnecting}
          className="w-full flex items-center gap-2"
        >
          {isConnecting ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin" />
              Connexion SDK...
            </>
          ) : (
            <>
              <Phone className="h-4 w-4" />
              Test SDK ({selectedConversationType === 'cold-call' ? 'Cold Call' : 'RDV'})
            </>
          )}
        </Button>

        <div className="text-xs text-muted-foreground text-center">
          Version test SDK - API √† finaliser
        </div>
      </div>
    </Card>
  );
}